//! Autogenerated CPI client for the Raydium CP Swap program.
//!
//! CPI helpers for the [Raydium CP Swap](https://github.com/raydium-io/raydium-cp-swap)
//! program.
//!
//! This crate was automatically generated by
//! [anchor-gen](https://github.com/saber-hq/anchor-gen), a crate for generating
//! Anchor CPI helpers from JSON IDLs.

use std::mem::size_of;

anchor_gen::generate_cpi_crate!("raydium_cp_swap.json");

#[cfg(feature = "devnet")]
declare_id!("CPMDWBwJDtYax9qW7AyRuVC19Cc4L4Vcy4n2BHAbHkCW");
#[cfg(not(feature = "devnet"))]
declare_id!("CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C");

pub mod create_pool_fee_reveiver {
    use anchor_lang::prelude::declare_id;
    #[cfg(feature = "devnet")]
    declare_id!("G11FKBRaAkHAKuLCgLM6K6NUc9rTjPAznRCjZifrTQe2");
    #[cfg(not(feature = "devnet"))]
    declare_id!("DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8");
}

pub const AUTH_SEED: &str = "vault_and_lp_mint_auth_seed";
pub const POOL_SEED: &str = "pool";
pub const POOL_LP_MINT_SEED: &str = "pool_lp_mint";
pub const POOL_VAULT_SEED: &str = "pool_vault";
pub const OBSERVATION_SEED: &str = "observation";

impl instruction::Initialize {
    /// Packs Initialize into a byte buffer.
    pub fn pack(&self) -> Result<Vec<u8>> {
        let mut buf = Vec::with_capacity(size_of::<Self>());

        buf.extend_from_slice(&self._init_amount0.to_le_bytes());
        buf.extend_from_slice(&self._init_amount1.to_le_bytes());
        buf.extend_from_slice(&self._open_time.to_le_bytes());

        Ok(buf)
    }
}
